#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–æ–ª–µ–π
"""

import customtkinter as ctk
from auth_system import AuthSystem
from login_window import LoginWindow
from knowledge_editor import KnowledgeEditor
from data_editor import DataEditor
from solver import Solver
import os

class MainApplication:
    def __init__(self):
        self.auth_system = AuthSystem()
        self.current_user = None
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤—Ö–æ–¥–∞
        self.show_login()
        
        if not self.auth_system.is_authenticated():
            print("‚ùå –í—Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.create_main_window()
    
    def show_login(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –≤—Ö–æ–¥–∞"""
        login_window = LoginWindow()
        success, user_data = login_window.run()
        
        if success:
            self.current_user = user_data
            print(f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {user_data['username']} ({user_data['role']})")
        else:
            print("‚ùå –í—Ö–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    
    def create_main_window(self):
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.window = ctk.CTk()
        self.window.title("–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏—è–º–∏")
        self.window.geometry("1200x800")
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        self.center_window()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
        self.window.mainloop()
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.window.update_idletasks()
        width = self.window.winfo_width()
        height = self.window.winfo_height()
        x = (self.window.winfo_screenwidth() // 2) - (width // 2)
        y = (self.window.winfo_screenheight() // 2) - (height // 2)
        self.window.geometry(f"{width}x{height}+{x}+{y}")
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(self.window)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        self.create_header(main_frame)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.create_tabs(main_frame)
    
    def create_header(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        header_frame = ctk.CTkFrame(parent)
        header_frame.pack(fill="x", padx=10, pady=(10, 5))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = f"üë§ {self.current_user['username']} ({self.current_user['role']})"
        user_label = ctk.CTkLabel(
            header_frame, 
            text=user_info,
            font=ctk.CTkFont(size=16, weight="bold")
        )
        user_label.pack(side="left", padx=20, pady=10)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        logout_button = ctk.CTkButton(
            header_frame,
            text="–í—ã–π—Ç–∏",
            command=self.logout,
            width=100
        )
        logout_button.pack(side="right", padx=20, pady=10)
    
    def create_tabs(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.tabview = ctk.CTkTabview(parent)
        self.tabview.pack(fill="both", expand=True, padx=10, pady=5)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤
        self.data_editor = None
        self.knowledge_editor = None
        self.task_solver = None
        self.data_viewer = None
        
        # –í–∫–ª–∞–¥–∫–∞ "–†–µ–¥–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö" (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º)
        self.data_tab = self.tabview.add("üìä –†–µ–¥–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
        self.tabview.tab("üìä –†–µ–¥–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö").bind("<Button-1>", lambda e: self.on_data_tab_click())
        
        # –í–∫–ª–∞–¥–∫–∞ "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤" (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º)
        self.interface_tab = self.tabview.add("üåê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤")
        self.tabview.tab("üåê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤").bind("<Button-1>", lambda e: self.on_interface_tab_click())
        
        # –í–∫–ª–∞–¥–∫–∞ "–†–µ–¥–∞–∫—Ç–æ—Ä –∑–Ω–∞–Ω–∏–π" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
        if self.auth_system.can_access_knowledge_editor():
            self.knowledge_tab = self.tabview.add("üß† –†–µ–¥–∞–∫—Ç–æ—Ä –∑–Ω–∞–Ω–∏–π")
            self.tabview.tab("üß† –†–µ–¥–∞–∫—Ç–æ—Ä –∑–Ω–∞–Ω–∏–π").bind("<Button-1>", lambda e: self.on_knowledge_tab_click())
        
        # –í–∫–ª–∞–¥–∫–∞ "–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö" (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º, –Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
        self.view_tab = self.tabview.add("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        self.tabview.tab("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö").bind("<Button-1>", lambda e: self.on_view_tab_click())
    
    def on_data_tab_click(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –≤–∫–ª–∞–¥–∫–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if self.data_editor is None:
            self.create_data_editor_tab()
    
    def on_interface_tab_click(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –≤–∫–ª–∞–¥–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"""
        if self.task_solver is None:
            self.create_interface_generator_tab()
    
    def on_knowledge_tab_click(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –≤–∫–ª–∞–¥–∫–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∑–Ω–∞–Ω–∏–π"""
        if self.knowledge_editor is None:
            self.create_knowledge_editor_tab()
    
    def on_view_tab_click(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –≤–∫–ª–∞–¥–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if self.data_viewer is None:
            self.create_data_viewer_tab()
    
    def create_data_editor_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –∞–¥–º–∏–Ω—ã —Ç–æ–∂–µ
        self.data_editor = DataEditor(self.data_tab, readonly=False)
    
    def create_interface_generator_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º —Ä–µ—à–∞—Ç–µ–ª—å –∑–∞–¥–∞—á (–∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤)
        self.task_solver = Solver(self.interface_tab)
    
    def create_knowledge_editor_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∑–Ω–∞–Ω–∏–π"""
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –∑–Ω–∞–Ω–∏–π
        self.knowledge_editor = KnowledgeEditor(self.knowledge_tab)
    
    def create_data_viewer_tab(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∫–ª–∞–¥–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self.data_viewer = DataEditor(self.view_tab, readonly=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self.show_readonly_warning(self.view_tab)
    
    def show_readonly_warning(self, parent):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        warning_frame = ctk.CTkFrame(parent)
        warning_frame.pack(fill="x", padx=10, pady=5)
        
        warning_label = ctk.CTkLabel(
            warning_frame,
            text="‚ö†Ô∏è –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            font=ctk.CTkFont(size=14, weight="bold"),
            text_color="orange"
        )
        warning_label.pack(pady=10)
    
    def logout(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.auth_system.logout()
        self.window.destroy()
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.__init__()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏—è–º–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = [
        "knowledge_editor.py",
        "data_editor.py", 
        "solver.py",
        "html_generator.py"
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã: {missing_files}")
        return
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = MainApplication()

if __name__ == "__main__":
    main() 