import customtkinter
import sqlite3
from tkinter import ttk, messagebox
import os
import webbrowser
from datetime import datetime
from html_generator import HTMLInterfaceGenerator

class Solver:
    def __init__(self, master):
        self.master = master
        self.visible = False
        self.selected_screen_form = None  # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º—ã
        self.frame_middle = customtkinter.CTkFrame(master, fg_color="#fbf2fb")
        self.frame_right = customtkinter.CTkFrame(master, fg_color="#fbf2fb", width=400)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_interface()
        
        self.hide()
    
    def create_interface(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ—à–∞—Ç–µ–ª—è –∑–∞–¥–∞—á"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.label_title = customtkinter.CTkLabel(
            self.frame_middle,
            text="–†–µ—à–∞—Ç–µ–ª—å –∑–∞–¥–∞—á - –ê–Ω–∞–ª–∏–∑ —ç–∫—Ä–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º",
            font=("Arial", 18, "bold"),
            text_color="#FF007F"
        )
        self.label_title.grid(row=0, column=0, columnspan=2, padx=10, pady=10, sticky="w")
        
        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —ç–∫—Ä–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º
        self.label_screen_form = customtkinter.CTkLabel(
            self.frame_middle,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Ä–∞–Ω–Ω—É—é —Ñ–æ—Ä–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            font=("Arial", 12, "bold")
        )
        self.label_screen_form.grid(row=1, column=0, padx=10, pady=5, sticky="w")
        
        self.screen_form_select = customtkinter.CTkOptionMenu(
            self.frame_middle,
            values=self.get_screen_forms_list(),
            command=self.on_screen_form_selected,
            width=300
        )
        self.screen_form_select.grid(row=1, column=1, padx=10, pady=5, sticky="ew")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ
        self.frame_info = customtkinter.CTkFrame(self.frame_middle, fg_color="#ffffff")
        self.frame_info.grid(row=2, column=0, columnspan=2, padx=10, pady=10, sticky="ew")
        
        self.label_form_info = customtkinter.CTkLabel(
            self.frame_info,
            text="üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ",
            font=("Arial", 14, "bold"),
            text_color="#FF007F"
        )
        self.label_form_info.pack(pady=5)
        
        self.label_form_name = customtkinter.CTkLabel(
            self.frame_info,
            text="–ù–∞–∑–≤–∞–Ω–∏–µ: ",
            font=("Arial", 12)
        )
        self.label_form_name.pack(pady=2)
        
        self.label_ontology_term = customtkinter.CTkLabel(
            self.frame_info,
            text="–°–æ—Ä—Ç –æ–Ω—Ç–æ–ª–æ–≥–∏–∏: ",
            font=("Arial", 12)
        )
        self.label_ontology_term.pack(pady=2)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ (–æ–¥–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –Ω–∞ —Ñ–æ—Ä–º—É)
        self.label_alternative = customtkinter.CTkLabel(
            self.frame_middle,
            text="üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π —ç–∫—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã:",
            font=("Arial", 14, "bold"),
            text_color="#FF007F"
        )
        self.label_alternative.grid(row=3, column=0, columnspan=2, padx=10, pady=10, sticky="w")
        
        # –§—Ä–µ–π–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ
        self.frame_alternative_info = customtkinter.CTkFrame(self.frame_middle, fg_color="#ffffff")
        self.frame_alternative_info.grid(row=4, column=0, columnspan=2, padx=10, pady=5, sticky="ew")
        
        self.label_alt_name = customtkinter.CTkLabel(
            self.frame_alternative_info,
            text="–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: ",
            font=("Arial", 12)
        )
        self.label_alt_name.pack(pady=2)
        
        self.label_alt_set = customtkinter.CTkLabel(
            self.frame_alternative_info,
            text="–°–≤—è–∑–∞–Ω–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ: ",
            font=("Arial", 12)
        )
        self.label_alt_set.pack(pady=2)
        
        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.button_generate = customtkinter.CTkButton(
            self.frame_middle,
            text="üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
            command=self.generate_html_interface,
            fg_color="#FF6B6B",
            text_color="white",
            height=40
        )
        self.button_generate.grid(row=5, column=0, columnspan=2, padx=10, pady=15, sticky="ew")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è —Ñ—Ä–µ–π–º–∞ middle
        self.frame_middle.grid_columnconfigure(1, weight=1)
        
        # –ü—Ä–∞–≤—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        self.label_elements = customtkinter.CTkLabel(
            self.frame_right,
            text="üé® –≠–ª–µ–º–µ–Ω—Ç—ã –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:",
            font=("Arial", 14, "bold"),
            text_color="#FF007F"
        )
        self.label_elements.grid(row=0, column=0, padx=10, pady=10, sticky="w")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ
        self.label_selected_alt = customtkinter.CTkLabel(
            self.frame_right,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Ä–∞–Ω–Ω—É—é —Ñ–æ—Ä–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã",
            font=("Arial", 10),
            text_color="#666666"
        )
        self.label_selected_alt.grid(row=1, column=0, padx=10, pady=5, sticky="w")
        
        # –¢–∞–±–ª–∏—Ü–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        self.tree_elements = ttk.Treeview(
            self.frame_right,
            columns=("ID", "–≠–ª–µ–º–µ–Ω—Ç", "–°–≤–æ–π—Å—Ç–≤–æ", "–ó–Ω–∞—á–µ–Ω–∏–µ"),
            show="headings",
            height=15
        )
        self.tree_elements.heading("ID", text="ID")
        self.tree_elements.heading("–≠–ª–µ–º–µ–Ω—Ç", text="–ù–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞")
        self.tree_elements.heading("–°–≤–æ–π—Å—Ç–≤–æ", text="–°–≤–æ–π—Å—Ç–≤–æ")
        self.tree_elements.heading("–ó–Ω–∞—á–µ–Ω–∏–µ", text="–ó–Ω–∞—á–µ–Ω–∏–µ")
        self.tree_elements.column("ID", width=50)
        self.tree_elements.column("–≠–ª–µ–º–µ–Ω—Ç", width=120)
        self.tree_elements.column("–°–≤–æ–π—Å—Ç–≤–æ", width=120)
        self.tree_elements.column("–ó–Ω–∞—á–µ–Ω–∏–µ", width=120)
        self.tree_elements.grid(row=2, column=0, padx=10, pady=5, sticky="nsew")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Å–æ–≤ –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ —Ñ—Ä–µ–π–º–∞
        self.frame_right.grid_rowconfigure(2, weight=1)
        self.frame_right.grid_columnconfigure(0, weight=1)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.button_refresh = customtkinter.CTkButton(
            self.frame_right,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
            command=self.refresh_data,
            fg_color="#FFD1DC",
            text_color="#FF007F"
        )
        self.button_refresh.grid(row=3, column=0, padx=10, pady=10, sticky="ew")
    
    def get_screen_forms_list(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–∫—Ä–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º –∏–∑ data.db"""
        try:
            conn = sqlite3.connect("data.db")
            cursor = conn.cursor()
            cursor.execute("""
                SELECT sf.id, sf.form_name, sf.ontology_term
                FROM screen_forms sf
                ORDER BY sf.form_name
            """)
            forms_data = cursor.fetchall()
            conn.close()
            
            if not forms_data:
                return ["–ù–µ—Ç —ç–∫—Ä–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º"]
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∏ ID
            self.forms_dict = {f"{row[1]} ({row[2]})": row[0] for row in forms_data}
            return list(self.forms_dict.keys())
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —ç–∫—Ä–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º: {e}")
            return ["–ù–µ—Ç —ç–∫—Ä–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º"]
    
    def on_screen_form_selected(self, choice):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç–∫—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã"""
        if choice == "–ù–µ—Ç —ç–∫—Ä–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º":
            self.clear_form_info()
            self.selected_screen_form = None
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã
        self.selected_screen_form = self.forms_dict.get(choice)
        if self.selected_screen_form:
            self.load_form_info(choice)
            self.load_alternative_for_form(choice)
    
    def load_form_info(self, form_choice):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ –∏–∑ data.db"""
        try:
            conn = sqlite3.connect("data.db")
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ä–º—ã –∏–∑ –≤—ã–±–æ—Ä–∞
            form_id = self.forms_dict.get(form_choice)
            if not form_id:
                return
            
            cursor.execute("""
                SELECT sf.form_name, sf.ontology_term
                FROM screen_forms sf
                WHERE sf.id = ?
            """, (form_id,))
            
            row = cursor.fetchone()
            conn.close()
            
            if row:
                form_name, ontology_term = row
                self.label_form_name.configure(text=f"–ù–∞–∑–≤–∞–Ω–∏–µ: {form_name}")
                self.label_ontology_term.configure(text=f"–°–æ—Ä—Ç –æ–Ω—Ç–æ–ª–æ–≥–∏–∏: {ontology_term}")
            else:
                self.label_form_name.configure(text="–ù–∞–∑–≤–∞–Ω–∏–µ: –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
                self.label_ontology_term.configure(text="–°–æ—Ä—Ç –æ–Ω—Ç–æ–ª–æ–≥–∏–∏: –ù–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ä–º–µ: {e}")
            self.label_form_name.configure(text="–ù–∞–∑–≤–∞–Ω–∏–µ: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
            self.label_ontology_term.configure(text="–°–æ—Ä—Ç –æ–Ω—Ç–æ–ª–æ–≥–∏–∏: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
    
    def load_alternative_for_form(self, form_choice):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –¥–ª—è —ç–∫—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã"""
        try:
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            self.tree_elements.delete(*self.tree_elements.get_children())
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–æ—Ä–º—ã –∏–∑ –≤—ã–±–æ—Ä–∞
            form_id = self.forms_dict.get(form_choice)
            if not form_id:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –∏–∑ data.db
            conn_data = sqlite3.connect("data.db")
            cursor_data = conn_data.cursor()
            cursor_data.execute("SELECT form_name FROM screen_forms WHERE id = ?", (form_id,))
            form_name_row = cursor_data.fetchone()
            conn_data.close()
            
            if not form_name_row:
                return
            
            form_name = form_name_row[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –∏–∑ ontology.db
            conn_ontology = sqlite3.connect("ontology.db")
            cursor_ontology = conn_ontology.cursor()
            
            cursor_ontology.execute("""
                SELECT a.id, a.alternative_name, a.set_name
                FROM alternatives a
                WHERE a.set_name = ?
            """, (form_name,))
            
            alternative = cursor_ontology.fetchone()
            if not alternative:
                self.label_alt_name.configure(text="–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
                self.label_alt_set.configure(text="–°–≤—è–∑–∞–Ω–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ: –ù–µ –Ω–∞–π–¥–µ–Ω–æ")
                self.label_selected_alt.configure(text="–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–π —ç–∫—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã")
                conn_ontology.close()
                return
            
            alt_id, alt_name, set_name = alternative
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ
            self.label_alt_name.configure(text=f"–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: {alt_name}")
            self.label_alt_set.configure(text=f"–°–≤—è–∑–∞–Ω–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ: {set_name}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ
            self.label_selected_alt.configure(
                text=f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: {alt_name} (–ú–Ω–æ–∂–µ—Å—Ç–≤–æ: {set_name})"
            )
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –∏–∑ ontology.db
            cursor_ontology.execute("""
                SELECT ae.id, ie.name, poe.name, epd.property_value
                FROM alternative_elements ae
                JOIN element_properties_definition epd ON ae.element_property_id = epd.id
                JOIN interface_elements ie ON epd.element_id = ie.id
                JOIN properties_of_elements poe ON epd.property_id = poe.id
                WHERE ae.alternative_id = ?
                ORDER BY ie.name, poe.name
            """, (alt_id,))
            
            rows = cursor_ontology.fetchall()
            conn_ontology.close()
            
            for row in rows:
                self.tree_elements.insert("", "end", values=row)
                
            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(rows)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã '{alt_name}'")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: {e}")
            self.label_selected_alt.configure(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã")
    
    def clear_form_info(self):
        """–û—á–∏—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–µ"""
        self.label_form_name.configure(text="–ù–∞–∑–≤–∞–Ω–∏–µ: ")
        self.label_ontology_term.configure(text="–°–æ—Ä—Ç –æ–Ω—Ç–æ–ª–æ–≥–∏–∏: ")
        self.label_alt_name.configure(text="–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: ")
        self.label_alt_set.configure(text="–°–≤—è–∑–∞–Ω–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ: ")
        self.tree_elements.delete(*self.tree_elements.get_children())
        self.label_selected_alt.configure(text="–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Ä–∞–Ω–Ω—É—é —Ñ–æ—Ä–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã")
    
    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —ç–∫—Ä–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º
        self.screen_form_select.configure(values=self.get_screen_forms_list())
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë –¥–∞–Ω–Ω—ã–µ
        current_form = self.screen_form_select.get()
        if current_form and current_form != "–ù–µ—Ç —ç–∫—Ä–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º":
            self.load_form_info(current_form)
            self.load_alternative_for_form(current_form)
    
    def show(self):
        if not self.visible:
            self.frame_middle.grid(row=0, column=1, sticky="new", padx=10, pady=10)
            self.frame_right.grid(row=1, column=1, sticky="nsew", padx=10, pady=10)
            
            self.master.grid_rowconfigure(1, weight=1)
            self.master.grid_columnconfigure(1, weight=1)
            self.frame_right.grid_rowconfigure(2, weight=1)
            self.frame_right.grid_columnconfigure(0, weight=1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ
            self.refresh_data()
            
            self.visible = True
    
    def hide(self):
        if self.visible:
            self.frame_middle.grid_remove()
            self.frame_right.grid_remove()
            self.visible = False

    def generate_html_interface(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —ç–∫—Ä–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã"""
        if not self.selected_screen_form:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Ä–∞–Ω–Ω—É—é —Ñ–æ—Ä–º—É!")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä HTML
            generator = HTMLInterfaceGenerator()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
            html_content, error = generator.generate_html(self.selected_screen_form)
            
            if error:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML: {error}")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            filename = generator.save_html_file(html_content, self.selected_screen_form)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            self.show_generation_dialog(filename, html_content)
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML: {str(e)}")
    
    def show_generation_dialog(self, filepath, html_content):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –æ–ø—Ü–∏—è–º–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        dialog = customtkinter.CTkToplevel(self.master)
        dialog.title("HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        dialog.geometry("400x300")
        dialog.configure(fg_color="#ffffff")
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        dialog.transient(self.master)
        dialog.grab_set()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = customtkinter.CTkLabel(
            dialog,
            text="üéâ HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!",
            font=("Arial", 16, "bold"),
            text_color="#FF007F"
        )
        title_label.pack(pady=20)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        filename = os.path.basename(filepath)
        info_label = customtkinter.CTkLabel(
            dialog,
            text=f"–§–∞–π–ª: {filename}",
            font=("Arial", 12),
            text_color="#333333"
        )
        info_label.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = customtkinter.CTkFrame(dialog, fg_color="transparent")
        button_frame.pack(pady=20)
        
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        view_button = customtkinter.CTkButton(
            button_frame,
            text="üåê –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ",
            command=lambda: self.open_in_browser(filepath),
            fg_color="#4CAF50",
            text_color="white",
            width=150
        )
        view_button.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏
        folder_button = customtkinter.CTkButton(
            button_frame,
            text="üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É",
            command=lambda: self.open_folder(filepath),
            fg_color="#2196F3",
            text_color="white",
            width=150
        )
        folder_button.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_button = customtkinter.CTkButton(
            button_frame,
            text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
            command=dialog.destroy,
            fg_color="#FF6B6B",
            text_color="white",
            width=150
        )
        close_button.pack(pady=5)
    
    def open_in_browser(self, filepath):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç HTML —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        try:
            webbrowser.open(f'file://{os.path.abspath(filepath)}')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {e}")
    
    def open_folder(self, filepath):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–æ–º"""
        try:
            folder_path = os.path.dirname(os.path.abspath(filepath))
            if os.name == 'nt':  # Windows
                os.startfile(folder_path)
            else:  # Linux/Mac
                os.system(f'xdg-open "{folder_path}"')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏: {e}")